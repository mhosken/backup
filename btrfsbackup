#!/bin/bash

# backup drive volume name (no spaces)
DRIVENAME="Backup"

# any variation to the rsync command that does the backup
#RSYNC_EXTRAS="--max-size=100M"

if [ "$USER" == "root" ]; then
    UNAME=$SUDO_USER
else
    UNAME=$USER
fi

COMMAND="backup"

SUBVOL=$UNAME
show_usage()
{
    echo "Usage: $0 [options] [action]"
    echo "  Actions:"
    echo "    new    - create a new backup drive"
    echo "    init   - initialise a new subvolume"
    echo "    backup - Execute a backup (opt)"
    echo "  Options:"
    echo "    -s --subvolume=   backup to subvolume. Defaults to $SUBVOL"
    echo "    -v --volume=      backup to main volume. Defaults to $DRIVENAME"
    echo "    -h --help         print this help"
}

for i in "$@"
do
case $i in
  -s)
    SUBVOL=$2
    shift
    ;;
  --subvolume=*)
    SUBVOL="${i#*=}"
    ;;
  -v)
    DRIVENAME=$2
    shift
    ;;
  --volume=*)
    DRIVENAME="${i#*=}"
    ;;
  -h|--help)
    show_usage
    exit 2
    ;;
  *)
    COMMAND="$i"
    ;;
esac
shift
done


MOUNT=/media/$UNAME/$DRIVENAME
BASE=$MOUNT/$SUBVOL
#BASE=$MOUNT/mh

DEBUG=
#DEBUG=echo

case "$COMMAND" in
  new)
    shift
    DEV="$1"
    if [ -z "$DEV" ]; then
        echo "Please specify the drive device: e.g. btrfsbackup [opts] new /dev/sdc"
        exit 0
    fi
    $DEBUG parted -s -a optimal -- $DEV mklabel gpt mkpart primary 0 4GB mkpart primary 4GB -1c || exit 1
    echo "Be ready to type your backup drive password lots of times!"
    $DEBUG cryptsetup --verify-passphrase luksFormat ${DEV}2 -c aes -s 256 -h sha256
    DEVMAPPER=`udisksctl unlock -b ${DEV}2 2>/dev/null | sed -e 's/^.*as \([^ ]\+\)\.$/\1/'`
    $DEBUG mkfs -t btrfs -d dup -L $DRIVENAME $DEVMAPPER
    udisksctl mount -b ${DEV}2
    echo "Now use Startup disk creator to create a startup disk on ${DEV}1"
    ;;

  init)
    if btrfs subvolume show $BASE/backup > /dev/null 2>&1 ; then
        echo "Backup volume already initialised" 
        exit 1
    fi
    $DEBUG btrfs subvolume create $BASE
    $DEBUG btrfs subvolume create $BASE/backup
    $DEBUG mkdir $BASE/snapshots
    # setup default lesser backup
    if ! -e /.rsync-filter then
        echo "+ /home/" > /.rsync-filter
        echo "+ /var/***" >> /.rsync-filter
        echo "+ /etc/***" >> /.rsync-filter
        echo "+ /opt/***" >> /.rsync-filter
        echo "+ /root/***" >> /.rsync-filter
        echo "- /home/.ecryptfs/" >> /.rsync-filter
        echo "- /home/*/.gvfs/" >> /.rsync-filter
        echo "- /home/*/.cache/" >> /.rsync-filter
        echo "- lost+found/" >> /.rsync-filter
        echo "- /*/" >> /.rsync-filter
    fi
    exit 0
    ;;

  backup)
    if ! $DEBUG mount -o remount,compress-force=lzo,noatime $MOUNT ||
       ! btrfs subvolume show $BASE/backup > /dev/null 2>&1 ; then
            echo "Backup drive not mounted. Do you need to initialise it?"
            exit 1
    fi

    $DEBUG dpkg --get-selections > ~/dpkg_selections.txt
    $DEBUG ionice -c 3 rsync -aFHAX --inplace $RSYNC_EXTRAS --info=progress2 --del / $BASE/backup
    $DEBUG btrfs subvolume snapshot $BASE/backup $BASE/snapshots/snap-`date +%F-%H-%M`
    ;;
esac

